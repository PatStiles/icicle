use icicle_core::curve::{Affine, Curve, Projective};
use icicle_core::field::{Field, MontgomeryConvertibleField};
use icicle_core::traits::{FieldConfig, FieldImpl, GenerateRandom};
use icicle_core::{impl_curve, impl_field, impl_scalar_field};
use icicle_cuda_runtime::device_context::DeviceContext;
use icicle_cuda_runtime::error::CudaError;
use icicle_cuda_runtime::memory::HostOrDeviceSlice;
use ark_ff::fields::{Fp256, MontBackend, MontConfig};
use ark_ec::{
    models::{short_weierstrass::SWCurveConfig, CurveConfig},
    short_weierstrass::{Affine as ArkAffine, Projective as ArkProjective},
};
use ark_ff::{BigInt, Field as ArkField, MontFp, PrimeField, Zero};

pub(crate) const SCALAR_LIMBS: usize = 4;
pub(crate) const BASE_LIMBS: usize = 4;

// Fq config
#[derive(MontConfig)]
#[modulus = "3618502788666131213697322783095070105623107215331596699973092056135872020481"]
#[generator = "3"]
pub struct ArkFqConfig;
pub type Fq = Fp256<MontBackend<ArkFqConfig, 4>>;

// Fr config
#[derive(MontConfig)]
#[modulus = "3618502788666131213697322783095070105526743751716087489154079457884512865583"]
// Generated by adapting: https://github.com/arkworks-rs/algebra/blob/master/curves/bls12_377/scripts/base_field.sage#L7
#[generator = "3618502788666131213697322783095070105526743751716087489154079457884512865581"]
pub struct ArkFrConfig;
pub type Fr = Fp256<MontBackend<ArkFrConfig, 4>>;

/// G1_GENERATOR_X = 1
pub const G1_GENERATOR_X: Fq = MontFp!("87473945107800776645746498977432208364927860753324948115138248107286880660");

/// G1_GENERATOR_Y = 2
pub const G1_GENERATOR_Y: Fq = MontFp!("152666792071518830868575557812948353041420400780739481342941381225525861407");

#[derive(Clone, Default, PartialEq, Eq)]
pub struct ArkG1Config;

pub type ArkG1Affine = ArkAffine<ArkG1Config>;

impl CurveConfig for ArkG1Config {
    type BaseField = Fq;
    type ScalarField = Fr;

    /// COFACTOR = 1
    const COFACTOR: &'static [u64] = &[0x1];

    /// COFACTOR_INV = COFACTOR^{-1} mod r = 1
    const COFACTOR_INV: Fr = Fr::ONE;
}

impl SWCurveConfig for ArkG1Config {
    /// COEFF_A = 0
    const COEFF_A: Fq = Fq::ONE;

    /// COEFF_B = 3
    const COEFF_B: Fq = MontFp!("3141592653589793238462643383279502884197169399375105820974944592307816406665");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const GENERATOR: ArkG1Affine = ArkG1Affine::new_unchecked(G1_GENERATOR_X, G1_GENERATOR_Y);
}

impl_scalar_field!("stark252", stark252_sf, SCALAR_LIMBS, ScalarField, ScalarCfg, Fr);
impl_field!(BASE_LIMBS, BaseField, BaseCfg, Fq);
impl_curve!(
    "stark252",
    stark252,
    CurveCfg,
    ScalarField,
    BaseField,
    ArkG1Config,
    G1Affine,
    G1Projective
);

#[cfg(test)]
mod tests {
    use super::{CurveCfg, ScalarField, BASE_LIMBS};
    use icicle_core::curve::Curve;
    use icicle_core::tests::*;
    use icicle_core::traits::FieldImpl;
    use icicle_core::{impl_curve_tests, impl_field_tests};

    impl_field_tests!(ScalarField);
    impl_curve_tests!(BASE_LIMBS, CurveCfg);
}
